(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{826:function(t,e,n){"use strict";t.exports=function({mustBeMetaMask:t=!1,silent:e=!1,timeout:n=3e3}={}){!function(){if("boolean"!=typeof t)throw new Error("@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.");if("boolean"!=typeof e)throw new Error("@metamask/detect-provider: Expected option 'silent' to be a boolean.");if("number"!=typeof n)throw new Error("@metamask/detect-provider: Expected option 'timeout' to be a number.")}();let r=!1;return new Promise((o=>{function h(){if(r)return;r=!0,window.removeEventListener("ethereum#initialized",h);const{ethereum:n}=window;if(!n||t&&!n.isMetaMask){const r=t&&n?"Non-MetaMask window.ethereum detected.":"Unable to detect window.ethereum.";!e&&console.error("@metamask/detect-provider:",r),o(null)}else o(n)}window.ethereum?h():(window.addEventListener("ethereum#initialized",h,{once:!0}),setTimeout((()=>{h()}),n))}))}},975:function(t,e,n){"use strict";n.r(e),n.d(e,"MetamaskAdapter",(function(){return m}));var r=n(5),o=n.n(r),h=n(826),c=n.n(h),d=n(3);class m extends d.e{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),o()(this,"adapterNamespace",d.c.EIP155),o()(this,"currentChainNamespace",d.f.EIP155),o()(this,"type",d.a.EXTERNAL),o()(this,"name",d.i.METAMASK),o()(this,"status",d.d.NOT_READY),o()(this,"rehydrated",!1),o()(this,"metamaskProvider",null),this.chainConfig=t.chainConfig||null}get provider(){return this.status===d.d.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(t){throw new Error("Not implemented")}async init(t){if(super.checkInitializationRequirements(),this.metamaskProvider=await c()({mustBeMetaMask:!0}),!this.metamaskProvider)throw d.j.notInstalled("Metamask extension is not installed");this.status=d.d.READY,this.emit(d.b.READY,d.i.METAMASK);try{t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(t){this.emit(d.b.ERRORED,t)}}setAdapterSettings(t){}async connect(){if(super.checkConnectionRequirements(),this.chainConfig||(this.chainConfig=Object(d.m)(d.f.EIP155,1)),this.status=d.d.CONNECTING,this.emit(d.b.CONNECTING,{adapter:d.i.METAMASK}),!this.metamaskProvider)throw d.k.notConnectedError("Not able to connect with metamask");try{await this.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:t}=this.metamaskProvider;if(t!==this.chainConfig.chainId&&await this.switchChain(this.chainConfig),this.status=d.d.CONNECTED,!this.provider)throw d.k.notConnectedError("Failed to connect with provider");return this.provider.once("disconnect",(()=>{this.disconnect()})),this.emit(d.b.CONNECTED,{adapter:d.i.METAMASK,reconnected:this.rehydrated}),this.provider}catch(t){throw this.status=d.d.READY,this.rehydrated=!1,this.emit(d.b.ERRORED,t),d.k.connectionError("Failed to login with metamask wallet")}}async disconnect(){var t;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==d.d.CONNECTED)throw d.k.disconnectionError("Not connected with wallet");null===(t=this.provider)||void 0===t||t.removeAllListeners(),e.cleanup?(this.status=d.d.NOT_READY,this.metamaskProvider=null):this.status=d.d.READY,this.rehydrated=!1,this.emit(d.b.DISCONNECTED)}async getUserInfo(){if(this.status!==d.d.CONNECTED)throw d.k.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async switchChain(t){if(!this.metamaskProvider)throw d.k.notConnectedError("Not connected with wallet");try{await this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainId}]})}catch(e){if(4902!==e.code)throw e;await this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainId,chainName:t.displayName,rpcUrls:[t.rpcTarget]}]})}}}}}]);